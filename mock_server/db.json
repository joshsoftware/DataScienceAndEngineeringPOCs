{
  "submissions": [
    {
      "id": "43",
      "submitted_code": "import java.util.Scanner;\nimport java.util.Arrays;\n\npublic class Main {\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    String[] strings = scanner.nextLine().split(\",\");\n    System.out.println(longestCommonPrefix(strings));\n  }\n\n   public static String longestCommonPrefix(String[] strs) {\n        Arrays.sort(strs);\n        String s1 = strs[0];\n        String s2 = strs[strs.length-1];\n        int idx = 0;\n        while(idx < s1.length() && idx < s2.length()){\n            if(s1.charAt(idx) == s2.charAt(idx)){\n                idx++;\n            } else {\n                break;\n            }\n        }\n        return s1.substring(0, idx);\n    }\n\n\n}\n",
      "problem_statement": "Find a Pair Whose Sum is Closest to zero in Array. Given array of ? and -ve integers ,we need to find a pair whose sum is closed to Zero in Array.", 
      "language": "Java (OpenJDK 13.0.1)", 
      "difficulty_level": "easy"
    },
    {
      "id": "22",
      "submitted_code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint maxTransaction( string inputstr){\r\n  stringstream ss(inputstr);\r\n  vector<int>mangoes;\r\n  int mango;\r\n\r\n  while(ss >> mango){\r\n    mangoes.push_back(mango);\r\n    if(ss.peek()==','){\r\n      ss.ignore();\r\n    }\r\n  }\r\n  int coupens=1;\r\n  int rupees=10;\r\n  int transaction=0;\r\n\r\n\r\n  vector<int>v;\r\n  int max=0;\r\n  for(int i=1;i<mangoes.size();i++){\r\n    if(mangoes[i]> mangoes[i-1]){\r\n      v.push_back(mangoes[i]-mangoes[i-1]);\r\n    }else{\r\n      v.push_back(0);\r\n    }\r\n  }\r\n\r\n  for(int i=1;i<v.size();i++){\r\n    if(v[i]>max){\r\n      max=v[i];\r\n    }\r\n  }\r\n  for(int i=1;i<mangoes.size();i++){\r\n    if(mangoes[i]==mangoes[i-1]){\r\n      continue;\r\n    }\r\n    if(mangoes[i]<mangoes[i-1])\r\n    {\r\n      transaction++;\r\n    }\r\n    else\r\n    {\r\n      if((mangoes[i]-mangoes[i-1])==max){\r\n        coupens--;\r\n      }else{\r\n        if((rupees-(mangoes[i]-mangoes[i-1]))<0){\r\n          break;\r\n        }\r\n        rupees=rupees-(mangoes[i]-mangoes[i-1]);\r\n      }\r\n      transaction++;\r\n    }\r\n  }\r\nreturn transaction;\r\n\r\n}\r\n\r\nint main() {\r\n   string  inputstr;\r\n   cin>>inputstr;\r\n   int result=maxTransaction(inputstr);\r\n   cout<<result;\r\n\r\n}\r\n",
      "problem_statement": "Mohit has decided to distribute mangoes to needy people on the occasion of his birthday.\nMohit can buy mangoes by using either coupons or rupees. And donate mangoes to people. His every activity is considered as one transaction.\n\nExample, if Mohit has 4 mangoes and he bought 2 mangoes, this is one transaction and if Mohit donates 3 mangoes, it will be another transaction. So, the total number of transactions equals 2.\n\nMohit has 10 rupees and 1 coupon.\nFor N number of mangoes to buy, mohit can use 1 coupon or N rupees\n\nYour job is to help mohit to do maximum transaction using optimum combination of coupon and rupees\n\nGiven a STRING of integers, where each integer denotes the number of mangoes mohit has after each transaction.\nThe First integer denotes the initial number of mangoes mohit has.\n\nExample:\nInput: \"4,2,9,6,18,13,19\"\nOutput: 5\n\nExplanation:\nNumber of rupees = 10\nNumber of coupons = 1\nStep 1: (4,2) = Initially he has 4 mangoes, number of mangoes decreased to 3 denotes he donated 2 mangoes. Hence, It is Mohit's first transaction.\n   \nStep 2: (2,9) = Number of mangoes increased denotes mohit bought 7 mangoes. He can either use 1 coupon or 7 rupees. Remember you have only one coupon. So make sure to use it for the transaction of buying maximum mangoes. So, for this step we'll use 7 rupees. This is transaction number 2.\n   \nStep 3: (9,6) = Like step one, it is the donation of 3 mangoes, transaction 3rd.\nStep 4: (6,18) = Now we have 3 rupees and 1 coupon, so we can use the coupon for this transaction. This is the 4th transaction. After this, we have 3 rupees only\n\nStep 5: (18,13) = Like step 1 and 3, it is the donation of 5 mangoes, transaction 5th.\nStep 6: (13,19) = To buy 6 mangoes, we don't have enough money, so we can't proceed with this transaction.\n   \nHence, Output is 5",
      "language": "C++ (GCC 9.2.0)",
      "difficulty_level": "medium"
    },
    {
      "id": "24",
      "submitted_code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nbool isVowel(char ch){\r\n    return (ch=='a'|| ch=='e' || ch=='i'||ch=='o'||ch=='u'|| ch=='A' || ch=='E' || ch=='I' ||ch=='O'|| ch=='U');\r\n}\r\n\r\nint cntvowelInStr(string word){\r\n  int totalvowel=0;\r\n  int wordLength=word.length();\r\n\r\n  for(int i=0;i<wordLength;i++){\r\n    if(isVowel(word[i]))\r\n    {\r\n        long long remainingSubstr=static_cast<long long>(wordLength-i)*(i+1);\r\n    \r\n\r\n      if(totalvowel>numeric_limits<int>:: max()-remainingSubstr){\r\n          totalvowel=numeric_limits<int>::max();\r\n          break;\r\n      }\r\n    totalvowel+=static_cast<int>(remainingSubstr);\r\n    }\r\n  }\r\n  return totalvowel;\r\n}\r\n\r\nint main(){\r\n    string word;\r\n    cin>>word;\r\n\r\n    int result=cntvowelInStr(word);\r\n    cout<<result;\r\n}",
      "problem_statement": "Print the total amount of vowels ('a', 'e', I 'o', and 'u') in each substring of a word given as a string.\n\nA contiguous (non-empty) group of characters within a string is referred to as a substring.\n\nNote: The solution might not fit in a signed 32-bit integer due to the severe limitations. During the calculations, kindly use caution.\n\nExample 1:\n\nInput: abc\nOutput: 3\nExplanation: \nAll possible substrings are: \"a\", \"ab\", \"abc\", \"b\", \"bc\", and \"c\".\n- \"a\", \"ab\", and \"abc\" have 1 vowel each\n- \"b\", \"bc\", and \"c\" have 0 vowels each\nHence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3.\n\nExample 2:\n\nInput: ltcd\nOutput: 0\nExplanation: There are no vowels in any substring of \"ltcd\".\n \n\nConstraints:\n\n1 <= word.length <= 105\nword consists of lowercase English letters.",
      "language": "C++ (GCC 9.2.0)",
      "difficulty_level": "easy"
    },
    {
      "id": "37",
      "submitted_code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint calc(int n){\r\n    int sum=0;\r\n    while(n>0){\r\n        int digit=n%10;\r\n        sum+=digit*digit;\r\n        n=n/10;\r\n\r\n    }\r\n    return sum;\r\n}\r\n\r\nbool ismagicno(int n){\r\n    unordered_set<int>visited;\r\n\r\n    while(n!=1){\r\n        if(visited.count(n)>0){\r\n            return false;\r\n        }\r\n        visited.insert(n);\r\n        n=calc(n);\r\n    }\r\n    return true;\r\n}\r\n\r\nint main() {\r\n  int n;\r\n  cin>>n;\r\n\r\n  if(ismagicno(n)){\r\n      cout<<\"YES\"<<endl;\r\n  }else{\r\n      cout<<\"NO\"<<endl;\r\n  }\r\n  return 0;\r\n}\r\n",
      "problem_statement": "Write an algorithm to determine if a number n is magic.\n\nA magic number is a number defined by the following process:\n\nStarting with any positive integer, replace the number by the sum of the squares of its digits.\nRepeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\nThose numbers for which this process ends in 1 are happy.\nReturn YES if n is a magic number, and NO if not.\n\nExample 1:\n\nInput: 19\nOutput: YES\nExplanation:\nHere (1*1) = 1 & (9*9) = 81\ntherefore 1+81 = 82\nsimilarly,\n(8*8) + (2*2) = 68\n(6*6) + (8*8) = 100\n(1*1) + (0*0) + (0*0) = 1\n\nExample 2:\n\nInput: 2\nOutput: NO\n",
      "language": "C++ (GCC 9.2.0)",
      "difficulty_level": "hard"
    },
    {
      "id": "30",
      "submitted_code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// int solve(vector<int> arr, int rupee, int coupen){\r\n\r\n//     vector<int> temp;\r\n//     for(int i = 0; i < arr.size() - 1; i++){\r\n//         temp.push_back(arr[i] - arr[i+1]);\r\n//     }\r\n\r\n//     int maxi = *max_element(temp.begin(), temp.end());\r\n\r\n//     int transactions = 0;\r\n\r\n//     for(int i = 0; i < temp.size(); i++){\r\n//         if(temp[i] <= 0) transactions++;\r\n//         else{\r\n//             if(coupen == 1 && temp[i] == maxi){\r\n//                 coupen--;\r\n//                 transactions++;\r\n//             }\r\n//             else if(rupee >= temp[i]){\r\n//                 rupee -= temp[i];\r\n//                 transactions++;\r\n//             }\r\n//             else{\r\n//                 break;\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     return transactions;\r\n// }\r\n\r\n\r\n\r\nint main() {\r\n    string str;\r\n    cin >> str;\r\n\r\n    int rupee = 10;\r\n    int coupen = 1;\r\n\r\n    vector<int> arr;\r\n    string temp = \"\";\r\n\r\n    for(int i = 0; i < str.length(); i++){\r\n        if(str[i] != ','){\r\n            temp += str[i];\r\n        }\r\n        else{\r\n            arr.push_back(stoi(temp));\r\n            temp = \"\";\r\n        }\r\n    }\r\n\r\n    // cout << solve(arr, rupee, coupen);\r\n    vector<int> v;\r\n    int max = 0;\r\n\r\n    int transactions = 0;\r\n    for(int i = 0; i < arr.size(); i++){\r\n        if(arr[i] > arr[i-1]) v.push_back(arr[i] - arr[i-1]);\r\n        else v.push_back(0);\r\n    }\r\n\r\n    for(int i = 1; i < v.size(); i++){\r\n        if(v[i] > max) max= v[i];\r\n    }\r\n\r\n    for(int i = 1; i < arr.size(); i++){\r\n        if(arr[i] < arr[i-1]) transactions++;\r\n        else{\r\n            if(arr[i] -arr[i-1] == max){\r\n                coupen--;\r\n            }\r\n            else{\r\n                if( (rupee - (arr[i] - arr[i-1])) < 0) break;\r\n                rupee -= (arr[i] - arr[i-1]);\r\n            }\r\n\r\n            transactions++;\r\n        }\r\n    }\r\n\r\n    cout << transactions << \"\\n\";\r\n}\r\n",
      "problem_statement": "Mohit has decided to distribute mangoes to needy people on the occasion of his birthday.\nMohit can buy mangoes by using either coupons or rupees. And donate mangoes to people. His every activity is considered as one transaction.\n\nExample, if Mohit has 4 mangoes and he bought 2 mangoes, this is one transaction and if Mohit donates 3 mangoes, it will be another transaction. So, the total number of transactions equals 2.\n\nMohit has 10 rupees and 1 coupon.\nFor N number of mangoes to buy, mohit can use 1 coupon or N rupees\n\nYour job is to help mohit to do maximum transaction using optimum combination of coupon and rupees\n\nGiven a STRING of integers, where each integer denotes the number of mangoes mohit has after each transaction.\nThe First integer denotes the initial number of mangoes mohit has.\n\nExample:\nInput: \"4,2,9,6,18,13,19\"\nOutput: 5\n\nExplanation:\nNumber of rupees = 10\nNumber of coupons = 1\nStep 1: (4,2) = Initially he has 4 mangoes, number of mangoes decreased to 3 denotes he donated 2 mangoes. Hence, It is Mohit's first transaction.\n   \nStep 2: (2,9) = Number of mangoes increased denotes mohit bought 7 mangoes. He can either use 1 coupon or 7 rupees. Remember you have only one coupon. So make sure to use it for the transaction of buying maximum mangoes. So, for this step we'll use 7 rupees. This is transaction number 2.\n   \nStep 3: (9,6) = Like step one, it is the donation of 3 mangoes, transaction 3rd.\nStep 4: (6,18) = Now we have 3 rupees and 1 coupon, so we can use the coupon for this transaction. This is the 4th transaction. After this, we have 3 rupees only\n\nStep 5: (18,13) = Like step 1 and 3, it is the donation of 5 mangoes, transaction 5th.\nStep 6: (13,19) = To buy 6 mangoes, we don't have enough money, so we can't proceed with this transaction.\n   \nHence, Output is 5",
      "language": "C++ (GCC 9.2.0)",
      "difficulty_level": "medium"
    },
    {
      "id": "34",
      "submitted_code": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint solve(string str){\r\n\r\n    int count = 0;\r\n    for(int i = 0; i < str.length(); i++){\r\n        if(str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u') count++;\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nint vowelsCount(string str){\r\n\r\n    int count = 0;\r\n    for(int i = 0; i < str.length(); i++){\r\n        for(int j = i; j < str.length(); j++){\r\n            count += solve(str.substr(i, j - i + 1));\r\n        }\r\n    }\r\n    return count;\r\n}\r\n\r\nint main() {\r\n    string str;\r\n    cin >> str;\r\n\r\n    cout << vowelsCount(str);\r\n}\r\n",
      "problem_statement": "Print the total amount of vowels ('a', 'e', I 'o', and 'u') in each substring of a word given as a string.\n\nA contiguous (non-empty) group of characters within a string is referred to as a substring.\n\nNote: The solution might not fit in a signed 32-bit integer due to the severe limitations. During the calculations, kindly use caution.\n\nExample 1:\n\nInput: abc\nOutput: 3\nExplanation: \nAll possible substrings are: \"a\", \"ab\", \"abc\", \"b\", \"bc\", and \"c\".\n- \"a\", \"ab\", and \"abc\" have 1 vowel each\n- \"b\", \"bc\", and \"c\" have 0 vowels each\nHence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3.\n\nExample 2:\n\nInput: ltcd\nOutput: 0\nExplanation: There are no vowels in any substring of \"ltcd\".\n \n\nConstraints:\n\n1 <= word.length <= 105\nword consists of lowercase English letters.",
      "language": "C++ (GCC 9.2.0)",
      "difficulty_level": "easy"
    }
  ]
}